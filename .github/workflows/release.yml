# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Release

on:
  release:
    types: [created]

jobs:
  release-matrix:
    name: Release binary for linux and windows (console mode)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux,windows]
        goarch: [amd64]
        goversion: ["1.24"]
    steps:
      - uses: actions/checkout@v4
      - uses: wangyoucao577/go-release-action@v1.53
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          goos: ${{ matrix.goos }}
          goarch: ${{ matrix.goarch }}
          project_path: "."
          binary_name: "gmhost"
          ldflags: "-s -w"
          extra_files: README.md LICENSE
          goversion: ${{ matrix.goversion }}
  release-binary-msi:
    name: Release msi file
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [windows]
        goarch: [amd64]
        goversion: ["1.24"]
    steps:
      - uses: actions/checkout@v4
      - uses: wangyoucao577/go-release-action@v1.53
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          goos: ${{ matrix.goos }}
          goarch: ${{ matrix.goarch }}
          project_path: "."
          binary_name: "gmhostgui"
          ldflags: "-s -w -H windowsgui"
          extra_files: README.md LICENSE
          goversion: ${{ matrix.goversion }}
          pre_command: apt-get update && apt-get install -y wixl
          post_command: 
              GOOS=windows go build -o gmhost.exe -ldflags "-s -w" ../main.go
              && wixl -a x64
              -o "${INPUT_BINARY_NAME}-${GITHUB_REF_NAME}-${INPUT_GOARCH}-${INPUT_GOOS}.msi"
              ../setup.wxs
              && github-assets-uploader
              -logtostderr
              -f "${INPUT_BINARY_NAME}-${GITHUB_REF_NAME}-${INPUT_GOARCH}-${INPUT_GOOS}.msi"
              -mediatype text/plain
              -repo glimps-re/host-connector
              -token "${INPUT_GITHUB_TOKEN}"
              -tag="${GITHUB_REF_NAME}"
              -releasename="${INPUT_RELEASE_NAME}"
              -retry 3
